Funktion mistake1:

int buf[] = { 1, 1, 2, 3, 4, 5 };
return buf;

Fehler (Absturz: Access not within mapped region):
Stack-allokierter Speicher wird zurückgegeben.
Zugriff auf jenen Speicher ist invalid und führt zum Absturz.


Funktion mistake2:

int *buf = malloc (sizeof (char) * 4)

Fehler (Speicherfehler):
buf wird mit der Vielfache der Größe eines "char" Typs initialisiert, was in diesem Fall
dazuführt, dass der allokierte Speicher nicht groß genug ist, sodass er korrekt 
gelesen/beschrieben wird.


Funktion mistake3:

int *buf = (int *) &mistake2;
buf[0] = 3;

Fehler (Absturz: Bad permissions for mapped region):
Es wird versucht in die Addresse der Funktion mistake2 zu schreiben anstatt der Variabeln mistake2_.
Pointer von Funktionen unterliegen aber einige Einschränkungen, erlauben wahrscheinlich nicht, dass die
eigentliche Funktion überschrieben wird.

Fehler(Speicherfehler: Invalides Lesen):
Stack-allokierter Speicher wird zurückgegeben.
Führt irgendwie nicht zum Absturz, jedoch zum Lesen von nicht initialisierten Speicher.


Funktion mistake4:

buf[4] = 4;
free (buf);

Fehler(Speicherfehler: Invalides Lesen):
Der Speicher wird befreit und dann als Pointer zurückgegeben.
Dies führt dazu, dass freigegebener Speicher gelesen wird, was zwar nicht direkt zum
Absturz führen muss, jedoch invalid ist, kann also unvorhergesehene Werte lesen.

Fehler(Speicherfehler: Invalides Lesen/Schreiben):
Die Zahl 4 wird in einem Index gespeichert, der außerhalb des allokierten Speichers liegt.
Dies führt außerdem dazu das in der darauffolgenden printf Anweisung nicht initialisierter Speicher
gelesen wird. 


Funktion main:

free (p[1]);

Fehler(Speicherfehler: invalid Free):
Der Pointer an p[1] zeigt nicht auf das nullte sondern erste Element des Buffers.
Dies führt dazu das der Speicher nicht (ganz) freigegeben werden kann.

Fehlend(Speicherfehler: Leaks):
Es muss noch jeglicher dynamisch allokierter Speicher freigegeben werden, damit kein Speicher
"verloren" ("geleaked") wird.